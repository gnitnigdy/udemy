Counting Operations for Simplifying Big O Notation
==================================================
1. Arithmetic operations are constant.
2. Variable assignment is constant.
3. Accessing element in an array using key index or key object is constants.
4. Complexity of the loops depends on the length of the loops.

Space Complexity
==================================================
1. Most primitives are constants (bool, numbers, undefined, null)
2. strings are O(n) space.
3. Reference type like arrays and object are O(n).

Big O of Objects (Javascript)
==================================================
1. When to use object data types?
    Answer: (a) when you do not need order 
            (b) need fast access, insertion, and removal
2. Insertion O(1), Removal O(1), Searching O(n), Access O(1)
3. Big O of Object Methods: Object.keys O(n) , Object.values O(n), Object.entries O(n), 
        hasOwnProperty O(1)

Big O of Arrays (Javascript)
==================================================
1. When to use arrays?
    Answer : (a) when you need data in order
             (b) when you need fast access and removal
2. Insertion & Removal are O(depends), Searching O(N), Access O(1)
3. Insert to the end index of arrays are O(1)
4. Insert to the start index and reindexing all of the elements are O(n)
5. Push and pop method always more eficient than shift and unshift method
6. Array Methods List:
    a. push - O(1)
    b. pop - O(1)
    c. shift - O(n)
    d. unshift - O(n)
    e. concat - O(n)
    f. slice - O(n)
    g. splice - O(n)
    h. sort - O(n log n)
    i. foreach,map,filter,reduce,etc. - O(n)
7. Sorting takes longer due to moving and comparing things in arrays


Algorithms and Problem Solving Patterns
==================================================
1. Algorithm -> a process or set of steps to accomplish a certain task.
2. Algorithm is a foundation to become a successful devs, so we need to always practice 
    and improve the skills.
3. How to improve problem solving skills:
        a. Devise a plan for solving problems
        b. Mastering common problem solving Patterns
4. Problem Solving Steps by Steps:
        a. Understand the problem.
        b. Explore concrete examples.
        c. Breaking down.
        d. Solve and Simplifying
        e. Look Back and Refactor.
5. How to understand the problem?
    a. Can I restate the problem in my own words?
    b. What are the inputs that go into the problem?
    c. What are the outputs that should come from the solution to the problem?
    d. Can the outputs be determined from the inputs?
    e. How should i label the important pieces of data that are part of the problem?
6. How to explore concrete examples?
        a. Start with simple examples
        b. Progress to more complex examples
        c. Explore examples with invalid inputs
        d. Explore example with empty inputs
7. Break it down the problem -> write out the steps need to takes.
8. This is force to thinks about the code before writing the syntax.
9. How to Solve / Simplify The Problems:
    a. Find the core difficulties in the problems that want to be solved.
    b. Temporarily ignore the difficulties.
    c. Write a simplified solution.
    d. Incorporate the difficulties back in.
0. Lookback and Refactor The Solutions:
    a. Can we check the results?
    b. Can we derive the result differently?
    c. Can we understand it at a glance?
    d. Can we use the results/methods for other problems?
    e. Can we improve the performance of the solution?
    f. Can we think other ways to refactor?
    g. Lastly, how other people solved the problems?


==================================================
Frequency Counters - Problem Solving Patterns
==================================================
1. Using objects or sets to collect values of values.
2. This patterns avoiding O(n^2) in operations array or strings.
3. The idea behind the frequency counter usually use an object and you use that 
object to construct a way of breaking down the contents of an array/ string
and the we able to quicky compare the breakdown how another object looks that was constructed.
4. For of only used in iterable like strings or arrays. Do not use it in objects.
5. For of is faster than for in.
6.for...in is useful when you need to work with object properties and their values, 
while for...of is great for iterating through the values of an iterable like arrays, strings, sets, or maps.

==================================================
Multiple Pointers - Problem Solving Patterns
==================================================
1. Creating pointers of values that correspond to an index or position and move towards
the beginnning, end, or middle based on a certain condition.
2. Very efficient for solving problems with MINIMAL SPACE complexity as well.


==================================================
Sliding Windows - Problem Solving Patterns
==================================================
1. Creating a window which can either be an array or number from one position to another
2. Depending on a certain condition, the window either increase or close and a new 
window is created.
3. VERY USEFUL FOR KEEPING TRACK OF A SUBSET OF DATA IN ARRAY / STRING.


==================================================
Divide and Conquer - Problem Solving Patterns
==================================================
1. Dividing a data set into smaller chuncks and the repeating a process with a subset data.
2. This pattern tremondously decrease time complexity.


==================================================
Recursion
==================================================
1. Recursion is a process that calls itself
2. Sometimes using recursion can make a cleaner alternative to iteration
3. Two essential parts of recursive:
    a. Base Case -> To Make Recursive Stop
    b. Different inputs -> Input to be passed to the next call stack
4. Recursion Pitfalls:
    a. No Base Case
    b. Forget to return or returning the wrong things. //Recursive is waiting or depend to
    another result from another call function.
    c. Stack Overflow // Maximum Call stack exceeded
5. Pure Recursion:
    a. Use methods like slice, spread operator and concat that
    make copies of arrays so not mutating.
    b. Remember that strings are immutable so will need to use
        methods like slice substr or substring.
    c. Use object.assing or spread ops for making object's copy

==================================================
Linear Search
==================================================
1. Search is through one by one to every element in list or arrays.
2. Big O of this algorithm is O(1) -> if length is 1.
3. Average and worst is O(n)

==================================================
Binary Search
==================================================
1. Much faster form of search compare to linear search.
2. Eliminating hal of the remaining elements at a time.
3. ONLY WORK ON SORTED ARRAYS!
4. To do the Binary Search you will use Divide Conquer Principle:
    a. Get the middle point to become pivot numbers.
    b. If value that we search IS LESS THAN middle, middle+1 become Maximum
    c. If value that we search is GREATE THAN middle, middle-1 become minimum
5. Binary Search Pseudocode:
    a. Create function accepts sorted array and value.
    b. Initialize left/min value, max/right value, and middle is left+right(index)/2
    b. Loop while left still less than right to create middle pointer
    c. If value find in the middle return the value
    d. If value is too small move the left pointer to middle + 1
    e. if value is too larget move the right to middle-1

==================================================
Javascript Sort Methods
==================================================
1. Built-in sort method accepts optional comparator function.
2. Use this comparator function to tell JS how you want it to sort.
3. Comparator looks at pairs of elements (a and b) determines their sort order
based on the return value. If return negative a should come before b.

==================================================
Selection Sort Implementation
==================================================
Example : arr = [34,22,10,19,17]
1. Looping Over Items
2. Store the first element as the smallest value that have seen so far.
3. Compare the item to the next item in the array until find a new smaller number.
4. If a smaller number is found, designate that smaller number to be the new minimum
and continue until the end of the array.
5. If the minimum not the value you initiall began with, swap the two values.
6. Repeat this with the next element until the array is sorted.

Code Example:
let arr = [34, 22, 10, 19, 17];
for (let i = 0; i < arr.length; i++) {
  let lowest = i;
  for (let j = i + 1; j < arr.length; j++) {
    if (arr[j] < arr[lowest]) {
      lowest = j;
    }
  }
  if (i !== lowest) {
    let temp = arr[i];
    arr[i] = arr[lowest];
    arr[lowest] = temp;
    console.log(arr);
  }
}

//es 2015 syntax
function selectionSort(arr) {
  const swap = (arr, index1, index2) =>
    ([arr[index1], arr[index2]] = [arr[index2], arr[index1]]);

  for (let i = 0; i < arr.length; i++) {
    let lowest = i;
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[j] < arr[lowest]) {
        lowest = j;
      }
    }
    if (i !== lowest) swap(arr, i, lowest);
  }
  return arr;
}

console.log(`ini syntax 2015`);
let arr1 = [12, 9, 7, 1, 6, 3, 8, 4];
let results = selectionSort(arr1);
console.log(results);

7. Complexity Time : O(n^2) , Space Complexity: O(1)

==================================================
Insertion Sort Implementation
==================================================
1. Complexity : Time: O(n) / O(n^2) Space : O(1)
2. Start by picking the second element in the array
3. Compare the second element with the one before it and swap if necessary
4. Continue to the next element and if it is in the incorrect order, iterate through the 
sorted portion to place the element in the correct place.
5. Repeat until the array is sorted